* {
    margin: 0;
    padding: 0;
    font-family: 'Playfair Display', serif;
    box-sizing: border-box; /* bir etiketin toplam genişliğine ve yüksekliğine padding ve border'ı dahil etmemizi sağlar */
    text-decoration: none;
    border: none;
    scroll-behavior: smooth; /* Bu özellik, kaydırma işlemi sırasında sayfanın pürüzsüz bir şekilde kaymasını sağlar. */
}

:root {
    --bg-color: #1f242d;
    --second-bg-color: #323946;
    --text-color: #fff;
    --main-color: #0ef;
}

html {
    font-size: 62.5%;
    overflow-x: hidden; /* bir HTML elementinin yatay (x ekseni) taşmasının gizlenmesini sağlar. Bu, içeriğin taşarak elemanın sınırlarının dışına çıkmasını engeller ve görünmeyen kısmı keser. */
}

body {
    background: var(--bg-color);
    color: var(--text-color);
}

section {
    min-height: 100vh;
    padding: 10rem 9% 2rem; /* üstte 10 rem, sağda genişliğin %9'u ve altta 2 rem iç boşluk (padding) olacaktır. */
}

.header {
    position: fixed; /* bir HTML elementinin konumunu sabitler. Bu kuralı uygulanan element, tarayıcı penceresi veya viewport'a göre sabitlenir ve sayfa kaydırıldığında bile yerinde kalır. Bu, elemanın her zaman kullanıcı tarafından görülebilir olmasını sağlar. */ 
    top: 0;
    left: 0;
    width: 100%;
    padding: 2rem 9%;
    background: var(--bg-color);
    display: flex;
    justify-content: space-between;
    align-items: center;
    z-index: 100; /* konumlandırılmış elementlerin hangi sırayla üst üste görüntüleneceğini kontrol etmek için kullanılır. */
}

.logo {
    font-size: 2.5rem;
    color: var(--text-color);
    font-weight: 600;
}

.navbar a{
    font-size: 1.7rem;
    color: var(--text-color);
    margin-left: 4rem;  
}

.navbar a:hover,
.navbar a.active{
    color: var(--main-color);
    transition: .3s;
}

#menu-icon {
    font-size: 3.4rem;
    color: var(--text-color);
    display: none; /* bir öğe tüm içeriği ile gizlenecek ve yok sayılacaktır. (Görünürlüğü kapat) */
}

.home {
    display: flex; /* Bu, elemanın bir Flex konteyneri (esnek kutu konteyneri) olmasını sağlar. 
    Bu, çocuk elemanların (kapsayıcı içerisindeki doğrudan alt elemanlar) Flexbox düzenine göre 
    yerleştirileceği anlamına gelir. */

    justify-content: center; /* Bu özellik, çocuk elemanların yatay eksen boyunca hizalanma şeklini tanımlar. 
    center değeri, çocuk elemanları yatay eksende ortalar. Yani, çocuk elemanlar kapsayıcının 
    ortasında yer alır. */

    align-items: center; /* Bu özellik, çocuk elemanların dikey eksen boyunca hizalanma şeklini tanımlar. 
    center değeri, çocuk elemanları dikey eksende ortalar. Yani, çocuk elemanlar kapsayıcının 
    dikey ortasında yer alır. */
}

.home-container h3 {
    font-size: 3.2rem;
    font-weight: 700;
}


.home-container h3:nth-of-type(2) {
    margin-bottom: 2rem; /* h3 elemanı (yani "İkinci Başlık") altına 2 rem boşluk eklemiş olur.
     Bu, ikinci başlığın altındaki alanın genişlemesine neden olur ve altındaki içerik ile
    arasında 2 rem boşluk bırakır.
    */
}


span {
    color: var(--main-color);
}

.home-container h1 {
    font-size: 5.6rem;
    font-weight: 700;
    line-height: 1.3;
}

.home-container p {
    font-size: 1.6rem;
}

.home-img img {
    width: 35vw; /*  tarayıcı penceresinin genişliği 1000 piksel ise, 
    bir elemanın genişliği 35vw olarak ayarlandığında bu eleman 350 piksel genişliğinde olacaktır.
    
    Bu özellik, responsif (duyarlı) tasarımda sıkça kullanılır çünkü elemanın genişliğini 
    viewport boyutlarına göre dinamik olarak ayarlar, böylece farklı ekran boyutlarında 
    uygun bir genişlik elde edilir.
    */
}

.social-media a {
    display: inline-flex; /* Inline-flex, elemanın satır içi (inline) seviyesinde görüntülenmesini sağlarken, 
    içerideki çocuk elemanların Flexbox düzenine göre hizalanmasını sağlar. */
    justify-content: center;
    align-items: center;
    width: 4rem;
    height: 4rem;
    background: transparent;
    border: .2rem solid var(--main-color);
    border-radius: 50%;
    font-size: 2rem;
    color: var(--main-color);
    margin: 3rem 1.5rem 3rem 0; /* elemanın etrafında belirtilen miktarlarda dış boşluk olmasını sağlar. 
    Bu, elemanın çevresindeki diğer elemanlardan bu miktarlarda uzak olacağı anlamına gelir. */
}

.social-media a:hover {
    background: var(--main-color);
    color: var(--second-bg-color);
    box-shadow: 0 0 1rem var(--main-color);/* 1 rem bulanıklık yarıçapına sahip bir gölgeye sahip olacaktır. 
    Gölge, yatay veya dikeyde yer değiştirmeyecek, sadece elemanın etrafında bulanık bir şekilde görünecektir. */
    transition: .5s ease;
}

.btn {
    display: inline-block;
    padding: 1rem 2.8rem;
    background: var(--main-color);
    border-radius: 4rem;
    box-shadow: 0 0 1rem var(--main-color);
    font-size: 1.6rem;
    color: var(--second-bg-color);
    letter-spacing: .1rem;
    font-weight: 600;
    transition: .5s ease;
}

.btn:hover {
    box-shadow: none;
}

.about {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 2rem; /* Flex elemanları arasındaki boşluk(Burada img ve yazı kısmı arasındaki boşluk) */
    background: var(--second-bg-color);
}

.about-img img{
    width: 35vw;
}

.heading {
    text-align: center;
    font-size: 4.5rem;
}

.about-container h2 {
    text-align: left;
    line-height: 1.2;
}

.about-container h3 {
    font-size: 2.6rem;
}

.about-container p {
    font-size: 1.6rem;
    margin: 2rem 0 3rem;
}

.service h2{
    margin-bottom: 5rem;
}

.services-container{
    display: flex;
    align-items: center;  
    justify-content: center; /* Bütün box'ları ortala */
    flex-wrap: wrap;
    gap: 2rem;
}

.services-box{
    flex: 1 1 30rem; /* flex-grow: 1 - flex-shrink: 1 -flex-basis: 30rem */
    background: var(--second-bg-color);
    padding: 3rem 2rem 4rem;
    border-radius: 2rem;
    text-align: center; /* box içindeki elemanları ortala */
    border: .2rem solid var(--bg-color);
}

.services-box:hover{
    border-color: var(--main-color);
    transition: .5s ease;
    transform: scale(1.02); /* box üzerine gelindiğinde box'ı %2 oranında büyüt */
}

.services-box i{
    font-size: 7rem;
    color: var(--main-color);
    margin-bottom: 2rem;
}

.services-box h3{
    font-size: 2.6rem;

}

.services-box p{
    font-size: 1.5rem;
    margin: 1rem 0 3rem;
}

.portfolio{
    background: var(--second-bg-color);
}

.portfolio h2{
    margin-bottom: 4rem;
}

.portfolio-container{
    display: grid; /* display: grid; kullanarak iki boyutlu, esnek ve duyarlı bir düzen oluşturabilirsiniz. */
    grid-template-columns: repeat(3,1fr);
    /*
       - Bu özellik, grid'in sütun yapısını belirler.
       - `repeat(3, 1fr)` ifadesi, grid'in 3 eşit sütuna bölüneceğini belirtir.
       - `1fr`, her sütunun grid konteynerinin kullanılabilir alanının eşit bir kısmını 
    (fraksiyonunu) alacağı anlamına gelir. Yani, burada her bir sütun toplam genişliğin üçte birini kaplayacaktır.
    */
    align-items: center;
    gap: 2.5rem;
}

.portfolio-box{
    position: relative; /* özelliğine sahip bir ebeveyni yoksa belgeye göre kendini konumlandıracaktır. */
    border-radius: 2rem;
    box-shadow: 0 0 1rem var(--bg-color);
    overflow: hidden; /* Sınırladığımız kutunun dışına taşan kısımlar gösterilmeyecektir. */
    display: flex;
}

.portfolio-box img{
    width: 100%; /* Resimler box'ın içine tam otursun */
}

.portfolio-box:hover img{
    transform: scale(1.1); /* resmin üzerine gelindiğinde (`:hover` durumu), resmi %10 büyütür (`transform: scale(1.1);`)  */
    transition: .5s ease;
}

.portfolio-box .portfolio-layer{
    position: absolute; /* `.portfolio-layer` öğesini, `.portfolio-box` içindeki normal akıştan çıkarır ve bu öğenin konumunu diğer içerikten bağımsız olarak ayarlar. */
    bottom: 0; /*  `.portfolio-layer` öğesini, `.portfolio-box` öğesinin sol alt köşesine yerleştirir. */
    left: 0;
    width: 100%; /* `.portfolio-layer` öğesini, içinde bulunduğu `.portfolio-box` öğesinin tam genişliği ve yüksekliği kadar genişletir. */
    height: 100%;
    background: linear-gradient(rgba(0,0,0,.1),var(--main-color));
    /*
        - Arkaplan olarak bir lineer gradyan (iki renk arası geçiş) kullanır. 
        Bu gradyan, siyahın %10 şeffaflığında (rgba(0,0,0,.1)) başlar ve 
        `--main-color` değişkeni ile tanımlanan ana renge 
        (muhtemelen bir CSS değişkeniyle belirlenmiş) doğru geçiş yapar.

    */
    display: flex; /* `.portfolio-layer` öğesini bir flex konteyneri olarak düzenler. */
    justify-content: center; /* İçindeki içeriği (flex öğelerini) hem yatay hem de dikey olarak merkezler. */
    align-items: center;
    flex-direction: column; /* İçeriği dikey olarak sıralar, yani içindeki flex öğeleri dikey bir düzende hizalanır.*/
    text-align: center;
    padding: 0 4rem;
    transform: translateY(100%); /* öğenin kendi yüksekliği (veya ebeveyn öğenin yüksekliği, bağlamına bağlı olarak) kadar aşağıya (Y ekseni) taşınmasını sağlar. */
}

.portfolio-box:hover .portfolio-layer{ /* `.portfolio-box` sınıfına sahip bir öğenin içindeki `.portfolio-layer` sınıfına sahip bir öğeye fare ile üzerine gelindiğinde */
    transform: translateY(0%);
    /* 
        `translateY(0%)` ifadesi, öğenin dikey yönde hiçbir taşıma yapmadığı anlamına gelir. 
        Yani, `.portfolio-layer` öğesi üzerine gelindiğinde dikey yönde herhangi bir değişiklik yapılmaz.
    */
    transition: .5s ease;
}

.portfolio-layer h4{
    font-size: 3rem;
}

.portfolio-layer p{
    font-size: 1.6rem;
    margin: .3rem 0 1.5rem;
}

.portfolio-layer a{
    display: inline-flex;
    justify-content: center;
    align-items: center;
    width: 5rem;
    height: 5rem;
    background: var(--text-color);
    border-radius: 50%;
}

.portfolio-layer a i{
    font-size: 1.75rem;
    color: var(--second-bg-color);
}

.contact h2{
    margin-bottom: 3rem;
}

.contact form{
    max-width: 70rem;
    margin: 1rem auto;
    text-align: center;
    margin-bottom: 3rem;
}

.contact form .input-box{
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
}

.contact form .input-box input,
.contact form textarea{
    width: 100%;
    padding: 1.5rem;
    font-size: 1.6rem;
    color: var(--text-color);
    background: var(--second-bg-color);
    border-radius: .8rem;
    margin: .7rem 0;
}

.contact form .input-box input{
    width: 49%; /* input'lar arası boşluk olması için */
}

.contact form textarea{
    resize: none; /* Büyüyüp küçülmesini engellemek için */
}

.contact form .btn{
    margin-top: 2rem;
    cursor: pointer;
}

.footer{
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    padding: 2rem 9%;
    background: var(--second-bg-color);
}

.footer .footer-text p{
    font-size: 1.6rem;
}

.footer .footer-iconTop a{
    display: inline-flex;
    justify-content: center;
    align-items: center;
    padding: .8rem;
    background: var(--main-color);
    border-radius: .8rem;
}

.footer .footer-iconTop a i{
    font-size: 2rem;
    color: var(--second-bg-color);
}

.footer .footer-iconTop a:hover{
    box-shadow: 0 0 1rem var(--main-color);
    transition: .5s ease;
}